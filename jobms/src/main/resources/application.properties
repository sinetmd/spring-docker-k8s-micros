job-service.url=http://localhost:8082
company-service.url=http://localhost:8081
review-service.url=http://localhost:8083

# name & port
server.port=8082
spring.application.name=job-service

# Postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/job
spring.datasource.username=sinet
spring.datasource.password=sinet
spring.jpa.database=postgresql
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.generate-ddl=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# eureka discovery client
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# Zipkin
# reads 100% of the tracing
# for easier testing you could lower the probability
management.tracing.sampling.probability=1.0

# connecting to config server
# optional -> in case if my config server is not available
# it will read my application.properties file
spring.config.import=optional:configserver:http://localhost:8084
#
# default profile of this microservice is dev instead of default
spring.profiles.active=dev

# Resilience4j - circuit breaker
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-size=10
resilience4j.circuitbreaker.instances.companyBreaker.minimum-number-of-calls=55
resilience4j.circuitbreaker.instances.companyBreaker.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.companyBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

# with retry
resilience4j.retry.instances.companyBreaker.max-attempts=5
resilience4j.retry.instances.companyBreaker.wait-duration=2s

# resilience4j with rate limiter
resilience4j.ratelimiter.instances.companyBreaker.timeout-duration = 0
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period = 2
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period = 4s

# Actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always
